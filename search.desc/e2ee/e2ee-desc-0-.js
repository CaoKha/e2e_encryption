searchState.loadedDescShard("e2ee", 0, "E2EE Library\nA struct representing the End-to-End Encryption (E2EE) …\nEncrypts a message using the public key.\nReturns the argument unchanged.\nRetrieves the PEM-encoded public key.\nCalls <code>U::from(self)</code>.\nCreates a new <code>PublicE2ee</code> instance from a PEM-encoded …\nEncrypts a message using the client’s public key.\nFrees the memory associated with an <code>PublicE2ee</code> client …\nCreates a new <code>PublicE2ee</code> instance from a PEM-encoded …\nDecrypts a message using the server’s private key.\nEncrypts a message using the server’s public key.\nFrees the memory associated with an <code>E2ee</code> server object.\nFrees the memory associated with a C string.\nRetrieves the private key in PEM format from the given <code>E2ee</code>…\nRetrieves the public key in PEM format from the given <code>E2ee</code> …\nCreates a new <code>E2ee</code> instance with the specified RSA key …\nCreates a new <code>E2ee</code> instance from PEM-encoded private and …\n1024-bit RSA key\n2048-bit RSA key\n3072-bit RSA key\n4096-bit RSA key\nA struct representing the End-to-End Encryption (E2EE) …\nRepresents the key sizes available for RSA key generation.\nDecrypts a ciphertext using the private key.\nEncrypts a message using the public key.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieves the public key in its original <code>RsaPrivateKey</code> …\nRetrieves the PEM-encoded private key.\nRetrieves the public key in its original <code>RsaPublicKey</code> …\nRetrieves the PEM-encoded public key.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>E2ee</code> instance with the specified key size.\nCreates a new <code>E2ee</code> instance from PEM-encoded private and …\nSaves the PEM-encoded private and public keys to files.")